name: 'MLCityDeploy'

on:
  push:
    branches: ['main', 'android-and-ios-deploy']
  pull_request:
    branches: ['main']

jobs:
#   lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code```
#         uses: actions/checkout@v4
#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18
#       - name: Install dependencies
#         run: npm install
#       - name: Start prettier
#         run: npm run prettier:fix

#   build-deploy-web:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v1
#         with:
#           node-version: '18'
#       - name: Install dependencies
#         run: npm install
#       - name: Build web app
#         run: npm run build
#       - name: create ssh key
#         run: touch $HOME/key.pem && chmod 600 $HOME/key.pem && echo "${{secrets.SSH_PRIVATE_KEY}}" > $HOME/key.pem && chmod 600 $HOME/key.pem
#       - name: Deploy to server
#         if: success()
#         run: cd www && rsync -e "ssh -p 22 -i $HOME/key.pem -o StrictHostKeyChecking=no" --archive --compress --delete . ${{secrets.SSH_USER}}@${{secrets.HOST}}:${{secrets.PROJECT_FOLDER}}

#   build-deploy-android:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-java@v4
#         with:
#           java-version: '17'
#           distribution: 'temurin'
#           node-version: '18'

#       - name: Install androidsdk
#         run: sudo snap install androidsdk

#       - name: Set path androidsdk
#         run: export ANDROID_HOME=$HOME/cmdline-tools && export PATH=$PATH:$ANDROID_HOME/tools/bin && export PATH=$PATH:$ANDROID_HOME/platform-tools

#       - name: Install dependencies
#         run: npm install

#       - name: Build npx
#         run: npx ng build --configuration=production && npx cap copy && npx cap sync --inline

#       - name: Grable build
#         if: success()
#         run: cd android && sh ./gradlew  bundleRelease

#       - name: Add key in .aad
#         run: cd android && jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore MLCity_key_v2.jks -storepass ${{secrets.ANDROID_PASSWORD}} -keypass ${{secrets.ANDROID_PASSWORD}} app/build/outputs/bundle/release/app-release.aab ${{secrets.ANDROID_ALIAS}}

#       - name: create ssh key
#         run: touch $HOME/key.pem && echo "${{secrets.SSH_PRIVATE_KEY}}" > $HOME/key.pem && chmod 600 $HOME/key.pem

#       - name: Upload Android App to Play Store
#         uses: bbjoern/upload-google-play@v0.0.6
#         with:
#           serviceAccountJson: ${{ secrets.SERVICE_ACCOUNT_JSON }}
#           packageName: mlcity.ru
#           releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
#           track: production
#           inAppUpdatePriority: 2
#           userFraction: 0.33   - name: Setup Gradle
#         uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

#       - uses: actions/setup-node@v1
#         with:
   

  build-deploy-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/setup-node@v1
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Build npx
        run: npx ng build --configuration=production && npx cap copy && npx cap sync --inline
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_IOS_BUILD }}
          P12_PASSWORD: ${{ secrets.IOS_BUILD_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROFILE_IOS_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_BUILD_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      - name: build archive
        run: |
          cd ios/App && xcodebuild -scheme "App" \
          -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive          

      # - name: export ipa
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     ase64 --decode -o $EXPORT_OPTS_PATH
      #     xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/mlcity
          # you can also archive the entire directory 
          # path: ${{ runner.temp }}/build
          retention-days: 3