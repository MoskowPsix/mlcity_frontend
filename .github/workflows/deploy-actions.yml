name: 'MLCityDeploy'

on:
  push:
    branches: ['main', 'android-and-ios-deploy']
  pull_request:
    branches: ['main']

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code```
  #       uses: actions/checkout@v3
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - name: Install dependencies
  #       run: npm install
  #     - name: Start prettier
  #       run: npm run prettier:fix

  # build-deploy-web:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: '18'
  #     - name: Install dependencies
  #       run: npm install
  #     - name: Build web app
  #       run: npm run build
  #     - name: create ssh key
  #       run: touch $HOME/key.pem && chmod 600 $HOME/key.pem && echo "${{secrets.SSH_PRIVATE_KEY}}" > $HOME/key.pem && chmod 600 $HOME/key.pem
  #     - name: Deploy to server
  #       if: success()
  #       run: cd www && rsync -e "ssh -p 22 -i $HOME/key.pem -o StrictHostKeyChecking=no" --archive --compress --delete . ${{secrets.SSH_USER}}@${{secrets.HOST}}:${{secrets.PROJECT_FOLDER}}

  build-deploy-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/setup-node@v1
        with:
          node-version: '18'

      - name: Install androidsdk
        run: sudo snap install androidsdk

      - name: Set path androidsdk
        run: export ANDROID_HOME=$HOME/cmdline-tools && export PATH=$PATH:$ANDROID_HOME/tools/bin && export PATH=$PATH:$ANDROID_HOME/platform-tools

      - name: Install androidsdk
        run: sudo snap install androidsdk

      - name: Set path androidsdk
        run: export ANDROID_HOME=$HOME/cmdline-tools && export PATH=$PATH:$ANDROID_HOME/tools/bin && export PATH=$PATH:$ANDROID_HOME/platform-tools

      - name: Install dependencies
        run: npm install

      - name: Build npx
        run: npx ng build --configuration=production && npx cap copy && npx cap sync --inline

      - name: Grable build
        if: success()
        run: cd android && sh ./gradlew  bundleRelease

      - name: Add key in .aad
        run: cd android && jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore MLCity_key_v2.jks -storepass ${{secrets.ANDROID_PASSWORD}} -keypass ${{secrets.ANDROID_PASSWORD}} app/build/outputs/bundle/release/app-release.aab ${{secrets.ANDROID_ALIAS}}

      - name: Upload Android App to Play Store
        uses: joutvhu/publish-android@v1
        with:
          serviceAccountJson: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: mlcity.ru
          releaseFile: android/app/build/outputs/bundle/release/*.aab
          track: debug
          inAppUpdatePriority: 2

  build-deploy-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v1
        with:
          node-version: '18'
      - name: Set git
        run: git config --global user.email "${{secrets.GIT_EMAIL}}" && git config --global user.name "${{secrets.GIT_USERNAME}}"
      - name: install brew && brew update && brew upgrade openssl
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - name: install fastline
        run: brew install fastlane
      - name: Get App Store Connect API Key
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: AuthKey_${{ secrets.IOS_AUTH_KEY_ID }}.p8
          fileDir: ${{ github.workspace }}/ios/private_keys
          encodedString: ${{ secrets.IOS_AUTH_KEY_BASE64 }}
      - name: Set private key github
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: git_key
          fileDir: ${{ github.workspace }}/ios/App/fastlane
          encodedString: ${{ secrets.GIT_SSH_PRIVATE_KEY_BASE64 }}
      - name: Set user cookie apple
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: cookie
          fileDir: ~/.fastlane/spaceship/ixbit1@gmail.com
          encodedString: ${{ secrets.IOS_USER_COOKIE }}
      - name: Install the Apple certificate and provisioning profile
        env:
          # BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BUILD }}
          P12_PASSWORD: ${{ secrets.IOS_BUILD_PASSWORD }}
          DISTRIBUTEPROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROFILE_DISTRIBUTE }}
          # BUILD_PROVISION_PROFILE_BASE64: ${{secrets.PROFILE_IOS_BASE64}}
          DISTRIBUTE_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_DISTRIBUTE }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_BUILD_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH_DISTRIBUTE=$RUNNER_TEMP/distribute_certificate.p12
          PP_PATH_DISTRIBUTE=$RUNNER_TEMP/distribute_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificates and provisioning profile from secrets
          echo -n "$DISTRIBUTE_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH_DISTRIBUTE
          echo -n "$DISTRIBUTE_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH_DISTRIBUTE
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH_DISTRIBUTE -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH_DISTRIBUTE ~/Library/MobileDevice/Provisioning\ Profiles
      - name: npm install
        run: npm install
      - name: Build npx
        run: npx ng build --configuration=production && npx cap copy && npx cap sync --inline
      - name: set env fastlane
        run: |
          touch ios/App/fastlane/.env
          echo FASTLANE_KEI_ID=${{secrets.IOS_AUTH_KEY_ID}} >> ios/App/fastlane/.env
          echo FASTLANE_ISSUER_ID=${{secrets.secrets.IOS_AUTH_KEY_ISSUER_ID}} >> ios/App/fastlane/.env
          echo MATCH_PASSWORD=${{secrets.IOS_BUILD_PASSWORD}} >> ios/App/fastlane/.env
          echo GIT_URL=${{secrets.IOS_GIT_URL_REPO}} >> ios/App/fastlane/.env
          echo GIT_BRANCH=${{secrets.IOS_GIT_BRANCH_REPO}} >> ios/App/fastlane/.env
          echo GIT_USERNAME=${{secrets.IOS_GIT_USERNAME_REPO}} >> ios/App/fastlane/.env
          echo IOS_APP_IDENTIFIER=${{secrets.IOS_APP_IDENTIFIER}} >> ios/App/fastlane/.env
          echo IOS_TEAM_ID=${{secrets.IOS_TEAM_ID}} >> ios/App/fastlane/.env
          echo IOS_APPLE_ID=${{secrets.IOS_APPLE_ID}} >> ios/App/fastlane/.env
          echo IOS_ITC_TEAM_ID=${{secrets.IOS_ITC_TEAM_ID}} >> ios/App/fastlane/.env
          echo FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=${{secrets.IOS_APP_PASSWORD}}
          echo cat ios/App/fastlane/.env
      - name: Build app
        run: |
          cd ios/App && fastlane testflight
      - name: Publish the app to App Store Connect
        run: |
          cd ios && xcrun altool --upload-app -f ~/App.ipa -t iOS \
          --apiIssuer ${{ secrets.IOS_AUTH_KEY_ISSUER_ID }} --apiKey ${{ secrets.IOS_AUTH_KEY_ID }}
      - name: rm files
        run: |
          sudo rm -r ios/App/fastlane/.env
          sudo rm -r ios/private_keys/AuthKey_${{ secrets.IOS_AUTH_KEY_ID }}.p8
          sudo rm -r ios/App/fastlane/git_key
